diff --git a/python/sglang/srt/managers/scheduler.py b/python/sglang/srt/managers/scheduler.py
index 62d1ff9..9a5b36a 100644
--- a/python/sglang/srt/managers/scheduler.py
+++ b/python/sglang/srt/managers/scheduler.py
@@ -71,6 +71,7 @@ from sglang.srt.utils import (
     suppress_other_loggers,
 )
 from sglang.utils import get_exception_traceback
+from rpdTracerControl import rpdTracerControl
 
 logger = logging.getLogger(__name__)
 
@@ -238,13 +239,13 @@ class Scheduler:
                 "Profiling enabled. Traces will be saved to: %s",
                 self.torch_profiler_trace_dir,
             )
-            self.profiler = torch.profiler.profile(
-                activities=[
-                    torch.profiler.ProfilerActivity.CPU,
-                    torch.profiler.ProfilerActivity.CUDA,
-                ],
-                with_stack=True,
-            )
+#            self.profiler = torch.profiler.profile(
+#                activities=[
+#                    torch.profiler.ProfilerActivity.CPU,
+#                    torch.profiler.ProfilerActivity.CUDA,
+#                ],
+#                with_stack=True,
+#            )
 
     @torch.inference_mode()
     def event_loop(self):
@@ -1025,17 +1026,26 @@ class Scheduler:
         return success, message
 
     def start_profile(self) -> None:
-        if self.profiler is None:
-            raise RuntimeError("Profiler is not enabled.")
-        self.profiler.start()
+#        if self.profiler is None:
+#            raise RuntimeError("Profiler is not enabled.")
+#        self.profiler.start()
+        logger.info("SOGA: rpd is enable")
+        if self.tp_rank == 0:
+            self.rpd = rpdTracerControl()
+            self.rpd.start()
+            logger.info("rpd is enable")
 
     def stop_profile(self) -> None:
-        if self.profiler is None:
-            raise RuntimeError("Profiler is not enabled.")
-        self.profiler.stop()
-        self.profiler.export_chrome_trace(
-            self.torch_profiler_trace_dir + "/" + str(time.time()) + ".trace.json.gz"
-        )
+#        if self.profiler is None:
+#            raise RuntimeError("Profiler is not enabled.")
+#        self.profiler.stop()
+#        self.profiler.export_chrome_trace(
+#            self.torch_profiler_trace_dir + "/" + str(time.time()) + ".trace.json.gz"
+#        )
+        if self.tp_rank == 0:
+            self.rpd.stop()
+            self.rpd.flush()
+            logger.info("rpd is done")
         logger.info("Profiler is done")
 
 
